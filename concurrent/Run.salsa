module concurrent;

import java.io.*;
import java.util.*;

behavior Run {

  void act(String[] args)
  {
    ArrayList actors = new ArrayList();
    ArrayList lines = new ArrayList();

    // Hack to ensure the output.txt file is empty.
    try
    {
      FileWriter fw = new FileWriter("output.txt");
      fw.close();
    }
    catch (IOException e)
    {
      standardOutput<-println("[error] Can't open the output.txt file for writing.");
      System.exit(1);
    }

    // This block reads each line of the file into the lines arraylist.
    try
    {
      FileReader fb = new FileReader(args[0]);
      BufferedReader in = new BufferedReader(fb);

      String temp = in.readLine();
      while(temp != null)
      {
        lines.add(temp);
        temp = in.readLine();
      }

      in.close();
      fb.close();
    }
    catch (IOException ioe)
    {
      standardOutput<-println("[error] Can't open the config.tsv file for reading.");
      System.exit(1);
    }

    Russia supervisor = new Russia();

    // Construct an actor for each of the lines of input with special consideration
    // given to the first item constructed, it has no left neighbor with which to
    // construct a "Dude". Its left neighbor is set later.
    for(int a = 0; a < lines.size(); a++)
    {
      String[] bits = ((String)lines.get(a)).split("\t");

      // The first actor
      if(actors.size() == 0)
      {
        actors.add(new Dude(Integer.parseInt(bits[0]),
                  bits[1],
                  Integer.parseInt(bits[2]),
                  Integer.parseInt(bits[3]),
                  Integer.parseInt(bits[4]),
                  lines.size(),
                  null,
                  supervisor));
      }
      else
      {
        actors.add(new Dude(Integer.parseInt(bits[0]),
                  bits[1],
                  Integer.parseInt(bits[2]),
                  Integer.parseInt(bits[3]),
                  Integer.parseInt(bits[4]),
                  lines.size(),
                  (Dude) actors.get(actors.size()-1),
                  supervisor));
      }
    }

    // Set the left node of the first actor as appropriate then have the
    // supervisor start radial growth.
    actors.get(0) <- setLeft(actors.get(actors.size()-1)) @
    supervisor <- radialGrowth(actors);

  }
}
