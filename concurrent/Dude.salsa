module concurrent;

import java.io.*;
import java.util.*;

behavior Dude{
  int id;
  String host;
  int port;
  int priority;
  int tolerance;
  int actors;

  int replies;

  boolean pastLeader;

  Dude left;
  Russia supervisor;

  Dude(int id, String host, int port, int priority, int tolerance, int actors, Dude left, Russia supervisor) {
    this.id = id;
    this.host = host;
    this.port = port;
    this.priority = priority;
    this.tolerance = tolerance;
    this.actors = actors;

    this.pastLeader = false;

    this.left = left;
    this.supervisor = supervisor;
  }

  // Called at the beginning of radial growth. Resets replies variable and ignores request if the actor
  // has already been a leader.
  void beginGrowth(Dude candidate)
  {
    replies = 0;
    if(!pastLeader)
    {
        left <- RadialGrowth(candidate, id, priority, 1, true);
    }
  }

  // Reads in a reply to a radial growth message and if the leader bit is true, expand
  // the campaign. If false, stop.
  void RadialReply(Dude candidate, int candidateID, int candidatePriority, boolean leader)
  {
    replies+=1;
    if(leader)
      left <- RadialGrowth(candidate, candidateID, candidatePriority, (int)Math.pow(2, replies), leader);
  }

  // The main logic for radial growth. Asks neighbors (only left) if the current node is a good candidate.
  // Neighbors either pass along the message or respond to the original candidate telling them to keep
  // campaigning or stop.
  void RadialGrowth(Dude candidate, int candidateID, int candidatePriority, int TTL, boolean leader)
  {
    if(id == candidateID)
    {
      pastLeader = true;
      supervisor <- election(candidate, candidateID);
    }
    else if (TTL-1 == 0)
    {
      candidate <- RadialReply(candidate, candidateID, candidatePriority, leader);
    }
    else
    {
      if(priority > candidatePriority)
      {
        // The current candidate is better than the proposed.
        if(!pastLeader)
        {
          candidate <- RadialReply(candidate, candidateID, candidatePriority, false);
        }
        else
        {
          left <- RadialGrowth(candidate, candidateID, candidatePriority, TTL-1, leader);
        }
      }
      else
      {
        left <- RadialGrowth(candidate, candidateID, candidatePriority, TTL-1, leader);
      }
    }
  }

  // The election cycle, keeps track of revolts and determines if its time to be
  // deposed. Only when the president recieves its own message does it send
  // another.
  void tick(int timestamp, int electionTime, int presidentID, int revolts)
  {
    if(presidentID == this.id)
    {
      if(revolts > ((actors-1)/2))
      {
        supervisor <- depose(this.id, timestamp);
      }
      else
      {
        left <- tick(timestamp+1, electionTime, presidentID, revolts);
      }
    }
    // Revolts if its tolerance is exceeded but only the first time.
    else if(timestamp - electionTime > tolerance && timestamp - electionTime - actors < tolerance)
    {
      supervisor <- writeMessage("ID=" + this.id + " revolted at t=" + timestamp + "\n");
      left <- tick(timestamp+1, electionTime, presidentID, revolts+1);
    }
    else
    {
      left <- tick(timestamp+1, electionTime, presidentID, revolts);
    }
  }

  void setLeft(Dude left)
  {
    this.left = left;
  }

}
