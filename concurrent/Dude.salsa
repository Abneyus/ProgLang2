module concurrent;

import java.io.*;
import java.util.*;

behavior Dude{
  int id;
  String host;
  int port;
  int priority;
  int maxTolerance;
  int tolerance;

  boolean active;
  boolean revolted;
  boolean passive;
  boolean pastLeader;

  Dude left;
  Dude right;

  Dude(int id, String host, int port, int priority, int tolerance, Dude left, Dude right) {
    this.id = id;
    this.host = host;
    this.port = port;
    this.priority = priority;
    this.maxTolerance = tolerance;
    this.tolerance = 0;

    this.active = true;
    this.revolted = false;
    this.passive = false;
    this.pastLeader = false;

    this.left = left;
    this.right = right;
  }

  void campaign()
  {
    this.left <- consider(-1, -1, false);
  }

  void consider(int candidate, int canditatePriority)
  {
    if(candidate == this.id)
    {
      elect();
    }
    else
    {
      if(canditatePriority > this.priority)
      {
        this.left <- consider(candidate, canditatePriority);
      }
      else if(!pastLeader)
      {
        this.left <- consider(this.id, this.priority);
      }
      else
      {
        this.left <- consider(candidate, canditatePriority);
      }
    }
  }

  void elect()
  {
    pastLeader = true;
    standardOutput <- println("Node: " + id + " elected.");
  }


//ACCESSORS
  int getID() {
    return id;
  }
  String getHost() {
    return host;
  }
  int getPort() {
    return port;
  }
  int getTolerance() {
    return tolerance;
  }
  int getMaxTolerance() {
    return maxTolerance;
  }
  boolean getInactive() {
    return active;
  }
  boolean getRevolted() {
    return revolted;
  }

  boolean getPastLeader()
  {
    return pastLeader;
  }

//SETTERS
  void setRevolted(boolean b) {
    revolted = b;
  }

  void setLeft(Dude left)
  {
    this.left = left;
  }

  void setRight(Dude right)
  {
    this.right = right;
  }
  void setPastLeader(boolean b) {
    pastLeader=b;
  }

}
