package distributed;

// Import declarations generated by the SALSA compiler, do not modify.
import java.io.IOException;
import java.util.Vector;

import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import java.lang.reflect.InvocationTargetException;

import salsa.language.Actor;
import salsa.language.ActorReference;
import salsa.language.Message;
import salsa.language.RunTime;
import salsa.language.ServiceFactory;
import gc.WeakReference;
import salsa.language.Token;
import salsa.language.exceptions.*;
import salsa.language.exceptions.CurrentContinuationException;

import salsa.language.UniversalActor;

import salsa.naming.UAN;
import salsa.naming.UAL;
import salsa.naming.MalformedUALException;
import salsa.naming.MalformedUANException;

import salsa.resources.SystemService;

import salsa.resources.ActorService;

// End SALSA compiler generated import delcarations.

import java.io.*;
import java.util.*;

public class Run extends UniversalActor  implements ActorService {
	public static void main(String args[]) {
		UAN uan = null;
		UAL ual = null;
		if (System.getProperty("uan") != null) {
			uan = new UAN( System.getProperty("uan") );
			ServiceFactory.getTheater();
			RunTime.receivedUniversalActor();
		}
		if (System.getProperty("ual") != null) {
			ual = new UAL( System.getProperty("ual") );

			if (uan == null) {
				System.err.println("Actor Creation Error:");
				System.err.println("	uan: " + uan);
				System.err.println("	ual: " + ual);
				System.err.println("	Identifier: " + System.getProperty("identifier"));
				System.err.println("	Cannot specify an actor to have a ual at runtime without a uan.");
				System.err.println("	To give an actor a specific ual at runtime, use the identifier system property.");
				System.exit(0);
			}
			RunTime.receivedUniversalActor();
		}
		if (System.getProperty("identifier") != null) {
			if (ual != null) {
				System.err.println("Actor Creation Error:");
				System.err.println("	uan: " + uan);
				System.err.println("	ual: " + ual);
				System.err.println("	Identifier: " + System.getProperty("identifier"));
				System.err.println("	Cannot specify an identifier and a ual with system properties when creating an actor.");
				System.exit(0);
			}
			ual = new UAL( ServiceFactory.getTheater().getLocation() + System.getProperty("identifier"));
		}
		Run instance = (Run)new Run(uan, ual,null).construct();
		{
			Object[] _arguments = { args };
			instance.send( new Message(instance, instance, "act", _arguments, null, null) );
		}
	}

	public static ActorReference getReferenceByName(UAN uan)	{ return new Run(false, uan); }
	public static ActorReference getReferenceByName(String uan)	{ return Run.getReferenceByName(new UAN(uan)); }
	public static ActorReference getReferenceByLocation(UAL ual)	{ return new Run(false, ual); }

	public static ActorReference getReferenceByLocation(String ual)	{ return Run.getReferenceByLocation(new UAL(ual)); }
	public Run(boolean o, UAN __uan)	{ super(false,__uan); }
	public Run(boolean o, UAL __ual)	{ super(false,__ual); }

	public Run(UAN __uan,UniversalActor.State sourceActor)	{ this(__uan, null,null); }
	public Run(UAL __ual,UniversalActor.State sourceActor)	{ this(null, __ual,null); }
	public Run(UniversalActor.State sourceActor)		{ this(null, null,null);  }
	public Run()		{  }
	public Run(UAN __uan, UAL __ual,Object sourceActor) {
		if (__ual != null && !__ual.getLocation().equals(ServiceFactory.getTheater().getLocation())) {
			createRemotely(__uan, __ual, "distributed.Run");
		} else {
			State state = new State(__uan, __ual);
			state.updateSelf(this);
			ServiceFactory.getNaming().setEntry(state.getUAN(), state.getUAL(), state);
			if (getUAN() != null) ServiceFactory.getNaming().update(state.getUAN(), state.getUAL());
		}
	}

	public UniversalActor construct() {
		Object[] __arguments = { };
		this.send( new Message(this, this, "construct", __arguments, null, null) );
		return this;
	}

	public class State extends UniversalActor .State implements salsa.resources.ActorServiceState {
		public Run self;
		public void updateSelf(ActorReference actorReference) {
			((Run)actorReference).setUAL(getUAL());
			((Run)actorReference).setUAN(getUAN());
			self = new Run(false,getUAL());
			self.setUAN(getUAN());
			self.setUAL(getUAL());
			self.muteGC();
		}

		public State() {
			this(null, null);
		}

		public State(UAN __uan, UAL __ual) {
			super(__uan, __ual);
			addClassName( "distributed.Run$State" );
			addMethodsForClasses();
		}

		public void construct() {}

		public void process(Message message) {
			Method[] matches = getMatches(message.getMethodName());
			Object returnValue = null;
			Exception exception = null;

			if (matches != null) {
				if (!message.getMethodName().equals("die")) {activateArgsGC(message);}
				for (int i = 0; i < matches.length; i++) {
					try {
						if (matches[i].getParameterTypes().length != message.getArguments().length) continue;
						returnValue = matches[i].invoke(this, message.getArguments());
					} catch (Exception e) {
						if (e.getCause() instanceof CurrentContinuationException) {
							sendGeneratedMessages();
							return;
						} else if (e instanceof InvocationTargetException) {
							sendGeneratedMessages();
							exception = (Exception)e.getCause();
							break;
						} else {
							continue;
						}
					}
					sendGeneratedMessages();
					currentMessage.resolveContinuations(returnValue);
					return;
				}
			}

			System.err.println("Message processing exception:");
			if (message.getSource() != null) {
				System.err.println("\tSent by: " + message.getSource().toString());
			} else System.err.println("\tSent by: unknown");
			System.err.println("\tReceived by actor: " + toString());
			System.err.println("\tMessage: " + message.toString());
			if (exception == null) {
				if (matches == null) {
					System.err.println("\tNo methods with the same name found.");
					return;
				}
				System.err.println("\tDid not match any of the following: ");
				for (int i = 0; i < matches.length; i++) {
					System.err.print("\t\tMethod: " + matches[i].getName() + "( ");
					Class[] parTypes = matches[i].getParameterTypes();
					for (int j = 0; j < parTypes.length; j++) {
						System.err.print(parTypes[j].getName() + " ");
					}
					System.err.println(")");
				}
			} else {
				System.err.println("\tThrew exception: " + exception);
				exception.printStackTrace();
			}
		}

		public void act(String[] args) {
			ArrayList actors = new ArrayList();
			ArrayList lines = new ArrayList();
			Writer writer = ((Writer)new Writer(this).construct());
			String nameServer = args[1];
			try {
				FileWriter fw = new FileWriter("output.txt");
				fw.close();
				FileReader fb = new FileReader(args[0]);
				BufferedReader in = new BufferedReader(fb);
				String temp = temp=in.readLine();
				while (temp!=null) {
					lines.add(temp);
					temp = in.readLine();
				}
				in.close();
				fb.close();
			}
			catch (IOException ioe) {
				{
					// standardOutput<-println("[error] Can't open the config.tsv file for reading.")
					{
						Object _arguments[] = { "[error] Can't open the config.tsv file for reading." };
						Message message = new Message( self, standardOutput, "println", _arguments, null, null );
						__messages.add( message );
					}
				}
				System.exit(1);
			}

			for (int a = 0; a<lines.size(); a++){
				String[] bits = ((String)lines.get(a)).split("\t");
				if (actors.size()==0) {{
					Dude temp = ((Dude)new Dude(new UAN("uan://"+nameServer+"/"+bits[0]), new UAL("rmsp://"+bits[1]+":"+bits[2]+"/"+a),this).construct(Integer.parseInt(bits[0]), bits[1], Integer.parseInt(bits[2]), Integer.parseInt(bits[3]), Integer.parseInt(bits[4]), lines.size(), null, writer));
					actors.add(temp);
				}
}				else {{
					Dude temp = ((Dude)new Dude(new UAN("uan://"+nameServer+"/"+bits[0]), new UAL("rmsp://"+bits[1]+":"+bits[2]+"/"+a),this).construct(Integer.parseInt(bits[0]), bits[1], Integer.parseInt(bits[2]), Integer.parseInt(bits[3]), Integer.parseInt(bits[4]), lines.size(), (Dude)actors.get(actors.size()-1), writer));
					actors.add(temp);
				}
}			}
			{
				Token token_2_0 = new Token();
				// actors.get(0)<-setLeft(actors.get(actors.size()-1))
				{
					Object _arguments[] = { actors.get(actors.size()-1) };
					Message message = new Message( self, actors.get(0), "setLeft", _arguments, null, token_2_0 );
					__messages.add( message );
				}
				// actors.get(0)<-consider(-1, -1, 0, 0)
				{
					Object _arguments[] = { new Integer(-1), new Integer(-1), new Integer(0), new Integer(0) };
					Message message = new Message( self, actors.get(0), "consider", _arguments, token_2_0, null );
					__messages.add( message );
				}
			}
		}
	}
}